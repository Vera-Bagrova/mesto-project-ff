{"version":3,"file":"main.js","mappings":"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","sources":["webpack://mesto-project-ff/./src/scripts/cards.js","webpack://mesto-project-ff/./src/scripts/card.js","webpack://mesto-project-ff/./src/scripts/modal.js","webpack://mesto-project-ff/./src/index.js"],"sourcesContent":["export const initialCards = [\n    {\n      name: \"Архыз\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/arkhyz.jpg\",\n    },\n    {\n      name: \"Челябинская область\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/chelyabinsk-oblast.jpg\",\n    },\n    {\n      name: \"Иваново\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/ivanovo.jpg\",\n    },\n    {\n      name: \"Камчатка\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kamchatka.jpg\",\n    },\n    {\n      name: \"Холмогорский район\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/kholmogorsky-rayon.jpg\",\n    },\n    {\n      name: \"Байкал\",\n      link: \"https://pictures.s3.yandex.net/frontend-developer/cards-compressed/baikal.jpg\",\n    }\n];","// Получаем Темплейт карточки\nconst getTemplate = () => {\n  return document\n    .querySelector(\"#card-template\")\n    .content.querySelector(\".card\")\n    .cloneNode(true);\n};\n\n// Функция создания карточки\nexport const createCard = (cardData, onDelete, toggleLiked, openPopup) => {\n  const cardElement = getTemplate();\n  const cardImage = cardElement.querySelector('.card__image');\n  const cardTitle = cardElement.querySelector('.card__title');\n  const deleteButton = cardElement.querySelector('.card__delete-button');\n  const likeButton = cardElement.querySelector('.card__like-button');\n\n  /**  присваиваем значения элементов клонированного шаблона */\n  cardImage.src = cardData.link;\n  cardImage.alt = cardData.name;\n  cardTitle.textContent = cardData.name;\n\n  /** обработчик клика иконки удаления, по которому будет вызван переданный в аргументах колбэк */\n  deleteButton.addEventListener('click', () => {\n    onDelete(cardElement);\n  });\n\n  /** обработчик клика иконки лайка, по которому будет вызван переданный в аргументах колбэк */\n  likeButton.addEventListener('click', toggleLiked);\n\n  /** обработчик клика по изображению, по которому будет вызван переданный в аргументах колбэк */\n  cardImage.addEventListener('click', () => {\n    openPopup(cardImage.src, cardTitle.textContent);\n  });\n\n  return cardElement;\n}\n\n// Функция-обработчик события удаления карточки\nexport const deleteCard = (card) => {\n  card.remove();\n}\n\n// Функция-обработчик события лайка карточки\nexport const toggleIsLiked = (evt) => {\n  if (evt.target.classList.contains('card__like-button')) {\n    evt.target.classList.toggle('card__like-button_is-active');\n  }\n}","const setPopupEventListeners = (popup) => {\n  popup.classList.add('popup_is-animated');\n  const closeButton = popup.querySelector('.popup__close');\n  closeButton.addEventListener('click', () => {\n    closeModal(popup);\n  })\n};\n\n// Функция открытия попапа\nconst openModal = (popupElement) => {\n  popupElement.classList.add('popup_is-opened');\n\n  document.addEventListener('keydown', handleEscModal);\n  popupElement.addEventListener('click', handleCloseModal);\n}\n\n// Функция закрытия попапа\nconst closeModal = (popupElement) => {\n  popupElement.classList.toggle('popup_is-opened');\n\n  document.removeEventListener('keydown', handleEscModal);\n  popupElement.removeEventListener('click', handleCloseModal);\n}\n\n// Функция-обработчик события нажатия Esc\nconst handleEscModal = (evt) => {\n  if (evt.key === 'Escape') {\n    const popupOpened = document.querySelector('.popup_is-opened');\n    closeModal(popupOpened);\n  };\n}\n\n// Функция-обработчик события клика по оверлею\nconst handleCloseModal = (evt) => {\n  if (evt.target.classList.contains('popup')) {\n    closeModal(evt.target);\n  };\n}\n\nexport { openModal, closeModal, setPopupEventListeners };\n","import './pages/index.css';\nimport { initialCards } from './scripts/cards.js'; \nimport { createCard, deleteCard, toggleIsLiked } from './scripts/card.js'; \nimport { openModal, closeModal, setPopupEventListeners } from './scripts/modal.js';\n\n// DOM узлы\nconst content = document.querySelector('.content');\nconst cardsContainer = content.querySelector('.places__list');\nconst editPopupButton = document.querySelector('.profile__edit-button');\nconst newItemPopupButton = document.querySelector('.profile__add-button');\nconst profileTitle = content.querySelector('.profile__title');\nconst profileDescription = content.querySelector('.profile__description');\n/** модальные окна */\nconst popups = document.querySelectorAll('.popup');\nconst editPopup = document.querySelector('.popup_type_edit');\nconst newCardPopup = document.querySelector('.popup_type_new-card');\nconst imagePopup = document.querySelector('.popup_type_image');\n\n/** форма редактирования и поля формы */\nconst formEdit = document.forms['edit-profile'];\nconst nameInput = formEdit.elements.name;\nconst jobInput = formEdit.elements.description;\n\n/** форма добавления карточки и поля формы */\nconst formNewPlace = document.forms['new-place'];\nconst placeInput = formNewPlace.elements['place-name'];\nconst linkInput = formNewPlace.elements.link;\n\npopups.forEach((popup) => {\n  setPopupEventListeners(popup);\n});\n\n// Функция-обработчик события клика по изображению карточки\nconst handleCardClick = (src, name) => {\n  /**  находим элементы Попапа картинки */\n  const imgPopup = imagePopup.querySelector('.popup__image');\n  const captionPopup = imagePopup.querySelector('.popup__caption');\n\n  /** Присваиваем элементам окна нужные значения */\n  imgPopup.src = src;\n  imgPopup.alt = name;\n  captionPopup.textContent = name;\n  \n  openModal(imagePopup);\n}\n\n// Выводим карточки на страницу\ninitialCards.forEach((elem) => {\n  const card = createCard(elem, deleteCard, toggleIsLiked, handleCardClick);\n\n  cardsContainer.append(card);\n}); \n\n// Слушатель события клика кнопки редактирования профиля\neditPopupButton.addEventListener('click', () => {\n  nameInput.value = profileTitle.textContent;\n  jobInput.value = profileDescription.textContent;\n\n  openModal(editPopup);\n});\n\n// Обработчик события отправки формы редактирования профиля\nconst handleFormEditSubmit = (evt) => {\n  evt.preventDefault(); // Отменяем стандартную отправку формы\n\n  profileTitle.textContent = nameInput.value;\n  profileDescription.textContent = jobInput.value;\n\n  closeModal(editPopup);\n  formEdit.reset();\n}\n\n// Слушатель события отправки формы редактирования профиля\nformEdit.addEventListener('submit', handleFormEditSubmit); \n\n// Слушатель события клика кнопки добавления карточки\nnewItemPopupButton.addEventListener('click', () => {\n  openModal(newCardPopup);\n});\n\n// Обработчик события отправки формы добавления карточки\nconst handleFormCardSubmit = (evt) => { \n  evt.preventDefault(); \n  \n  const newData = {\n    name: placeInput.value,\n    link: linkInput.value,\n  };\n\n  const newCard = createCard(newData, deleteCard, toggleIsLiked, handleCardClick);\n\n  cardsContainer.prepend(newCard);\n\n  closeModal(newCardPopup);\n  formNewPlace.reset();\n}\n\n// Слушатель события отправки формы добавления карточки\nformNewPlace.addEventListener('submit', handleFormCardSubmit);"],"names":["createCard","cardData","onDelete","toggleLiked","openPopup","cardElement","document","querySelector","content","cloneNode","cardImage","cardTitle","deleteButton","likeButton","src","link","alt","name","textContent","addEventListener","deleteCard","card","remove","toggleIsLiked","evt","target","classList","contains","toggle","openModal","popupElement","add","handleEscModal","handleCloseModal","closeModal","removeEventListener","key","popupOpened","cardsContainer","editPopupButton","newItemPopupButton","profileTitle","profileDescription","popups","querySelectorAll","editPopup","newCardPopup","imagePopup","formEdit","forms","nameInput","elements","jobInput","description","formNewPlace","placeInput","linkInput","forEach","popup","setPopupEventListeners","handleCardClick","imgPopup","captionPopup","elem","append","value","preventDefault","reset","newData","newCard","prepend"],"sourceRoot":""}